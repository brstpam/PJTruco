<?xml version="1.0" encoding="UTF-8"?>

<!-- Você pode editar livremente este arquivo. Veja os blocos comentados abaixo para -->
<!-- alguns exemplos de como personalizar a compilação. -->
<!-- (Se você excluí-lo e reabrir o projeto, ele será recriado.) -->
<!-- Por padrão, apenas os comandos Limpar e Construir usam este script de construção. -->
<!-- Comandos como Executar, Depurar e Teste só usam este script de compilação se -->
<!-- o recurso Compilar ao Salvar está desativado para o projeto. -->
<!-- Você pode desativar a configuração Compile on Save (ou Deploy on Save) -->
<!-- na caixa de diálogo Propriedades do projeto do projeto.-->
<project name="Truco" default="default" basedir=".">
    <description>Builds, tests, and runs the project Truco.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

  
Existem vários alvos que estão vazios por padrão e que podem ser
    usado para a execução de suas tarefas. Esses alvos geralmente são executados
    antes e depois de alguns alvos principais. Eles são:

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    
(Destinos que começam com '-' não devem ser chamados sozinhos.)

    Exemplo de inserção de um ofuscador após a compilação pode ser assim:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

  
Para lista de propriedades disponíveis, verifique o importado
    arquivo nbproject/build-impl.xml.


    Outra maneira de personalizar a compilação é substituir os destinos principais existentes.
    Os alvos de interesse são:

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar:                  JAR building
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

   Um exemplo de substituição do destino para execução do projeto pode ser assim:

        <target name="run" depends="Truco-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

Observe que o destino substituído depende do destino do jar e não apenas do
    o destino de compilação como o destino de execução regular faz. Mais uma vez, para obter uma lista de
    propriedades que você pode usar, verifique o destino que você está substituindo no
    arquivo nbproject/build-impl.xml.

    -->
</project>
